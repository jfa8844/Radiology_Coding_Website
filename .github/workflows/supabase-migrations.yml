# This GitHub Action workflow is triggered on every push to the 'main' branch.
# It can also be triggered manually from the GitHub Actions tab.
# It uses the Supabase CLI to deploy any new database migrations to your Supabase project.
#
# Workflow Steps:
# 1. Checks out the repository's code.
# 2. Sets up the Supabase CLI in the runner environment.
# 3. Pushes the database migrations, with retries to handle intermittent network issues.

name: Push Supabase Migrations

on:
  push:
    branches:
      - main # This action runs only on pushes to the main branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  push_migrations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest # Use the latest version of the Supabase CLI

      - name: Push Database Migrations with Retries
        env:
          # Your Supabase access token, stored as a GitHub Secret
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          # The database password, which is used to construct the DB URL
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          # Your Supabase project ID, used to construct the DB URL
          SUPABASE_PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          ATTEMPTS=0
          MAX_ATTEMPTS=3
          # The Supabase connection pooler is used here to avoid IPv6 issues with GitHub Actions.
          # The hostname is region-specific. If your project is not in 'us-east-1',
          # you will need to update the region in the hostname below.
          # You can find your project's region and connection string in your Supabase dashboard.
          DB_URL="postgres://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-us-east-2.pooler.supabase.com:5432/postgres"

          # Use a loop to retry the connection in case of transient network errors.
          until supabase db push --db-url "$DB_URL" || [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; do
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Connection failed. Retrying in 10 seconds... (Attempt $ATTEMPTS of $MAX_ATTEMPTS)"
            sleep 10
          done

          # If all retries fail, exit with an error.
          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "::error::Failed to connect to the database after $MAX_ATTEMPTS attempts."
            exit 1
          fi

          echo "Successfully pushed migrations."

